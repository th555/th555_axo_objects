<objdefs appVersion="1.0.12">
   <obj.normal id="mdapiano" uuid="e193dc6e-920f-11ea-8c5d-005056c00008">
      <sDescription>Port of Paul Kellett&apos;s MDA Piano.
This is a single voice, best put in a poly subpatch. Disable the combfltr attribute to save some cpu and sdram.
Don&apos;t forget to connect velocity!</sDescription>
      <author>Thijs Meijerink</author>
      <license>MIT</license>
      <helpPatch></helpPatch>
      <inlets>
         <frac32.bipolar name="note"/>
         <bool32.risingfalling name="gate"/>
         <frac32.positive name="velocity"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="out0" description="audio out left"/>
         <frac32buffer.bipolar name="out1" description="audio out right"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="Decay">
            <DefaultValue v="44.0"/>
         </frac32.u.map>
         <frac32.u.map name="Release">
            <DefaultValue v="32.0"/>
         </frac32.u.map>
         <frac32.u.map name="Hardness">
            <DefaultValue v="32.0"/>
         </frac32.u.map>
         <frac32.u.map name="Vel&gt;Hard">
            <DefaultValue v="32.0"/>
         </frac32.u.map>
         <frac32.u.map name="Muffle">
            <DefaultValue v="19.0"/>
         </frac32.u.map>
         <frac32.u.map name="Vel&gt;Muff">
            <DefaultValue v="38.5"/>
         </frac32.u.map>
         <frac32.u.map name="Vel Curve">
            <DefaultValue v="35.0"/>
         </frac32.u.map>
         <frac32.u.map name="Stereo">
            <DefaultValue v="54.0"/>
         </frac32.u.map>
         <frac32.u.map name="Tune">
            <DefaultValue v="32.0"/>
         </frac32.u.map>
         <frac32.u.map name="Random">
            <DefaultValue v="22.0"/>
         </frac32.u.map>
         <frac32.u.map name="Stretch">
            <DefaultValue v="42.0"/>
         </frac32.u.map>
      </params>
      <attribs>
         <combo name="combfltr" description="Stereo comb filter">
            <MenuEntries>
               <string>enable</string>
               <string>disable</string>
            </MenuEntries>
            <CEntries>
               <string>1</string>
               <string> 0</string>
            </CEntries>
         </combo>
      </attribs>
      <file-depends>
         <file-depend localFilename="mdaPianoData.raw" targetPath="/shared/mdapiano/mdaPianoData.raw"/>
      </file-depends>
      <includes>
         <include>./mdaPiano.cpp</include>
         <include>./mdaPiano.h</include>
      </includes>
      <depends>
         <depend>fatfs</depend>
      </depends>
      <code.declaration><![CDATA[#define M_E 2.71828182845904523536f

// Parameters in 0 to 1 floating point format
#define param_0    q27_to_float(param_Decay)
#define param_1    q27_to_float(param_Release)
#define param_2    q27_to_float(param_Hardness)
#define param_3    q27_to_float(param_Vel_gt_Hard)
#define param_4    q27_to_float(param_Muffle)
#define param_5    q27_to_float(param_Vel_gt_Muff)
#define param_6    q27_to_float(param_Vel_space_Curve)
#define param_7    q27_to_float(param_Stereo)
#define param_9    q27_to_float(param_Tune)
#define param_10   q27_to_float(param_Random)
#define param_11   q27_to_float(param_Stretch)

//voice state
int  delta;  //sample playback
int  frac;
int  pos;
int  end;
int  loop;

float env;  //envelope
float dec;

float f0;   //first-order LPF
float f1;
float ff;

float outl;
float outr;


struct KGRP  //keygroup
{
  int  root;  //MIDI root note
  int  high;  //highest note
  int  pos;
  int  end;
  int  loop;
};

float Fs, iFs;

///global internal variables
KGRP  kgrp[16];
int cmax, cpos;
float *comb, cdep, width, trim;
int size;
float tune, fine, random, stretch;
float muff, muffvel, sizevel, velsens, volume;

bool pgate; // previous gate signal]]></code.declaration>
      <code.init><![CDATA[#define WAVELEN 586349 // Size of data file/array in shorts
#define WAVEBYTES (WAVELEN*2) // Size of data in bytes
#define WAVEPATH "/shared/mdapiano/mdaPianoData.raw" // Location of data on SD card (see "file-depends" in the XML)

if(!PianoData::pianoData){
	short* pianoData = (short*) sdram_malloc(WAVEBYTES);
	if(!pianoData){
	   LogTextMessage("Malloc mdaPianoData in sdram failed!");
	   return;
	}
	
	// File loading code adapted from loadElementsData() in the firmware
	FIL FileObject;
	FRESULT err;
	UINT bytes_read;
	int i;
	
	err = f_open(&FileObject, WAVEPATH, FA_READ | FA_OPEN_EXISTING);
	if (err != FR_OK) {
	   LogTextMessage("Open failed: %s", WAVEPATH);
	   // clear array
	   for (i = 0; i < WAVELEN; i++) {
	       pianoData[i] = 0;
	   }
	   return;
	}
	err = f_read(&FileObject, pianoData, WAVEBYTES, &bytes_read);
	if (err != FR_OK) {LogTextMessage("Read failed %s\n", WAVEPATH); return;}
	err = f_close(&FileObject);
	if (err != FR_OK) {LogTextMessage("Close failed %s\n", WAVEPATH); return;}

	PianoData::pianoData = pianoData;
	LogTextMessage("mdaPiano loading sample complete, SDRAM free %d", sdram_get_free() );
} else {
//	LogTextMessage("mdaPiano sample already loaded");
}

//Waveform data and keymapping is hard-wired in *this* version
kgrp[ 0].root = 36;  kgrp[ 0].high = 37;  kgrp[ 0].pos = 0;       kgrp[ 0].end = 36275;   kgrp[ 0].loop = 14774;
kgrp[ 1].root = 40;  kgrp[ 1].high = 41;  kgrp[ 1].pos = 36278;   kgrp[ 1].end = 83135;   kgrp[ 1].loop = 16268;
kgrp[ 2].root = 43;  kgrp[ 2].high = 45;  kgrp[ 2].pos = 83137;   kgrp[ 2].end = 146756;  kgrp[ 2].loop = 33541;
kgrp[ 3].root = 48;  kgrp[ 3].high = 49;  kgrp[ 3].pos = 146758;  kgrp[ 3].end = 204997;  kgrp[ 3].loop = 21156;
kgrp[ 4].root = 52;  kgrp[ 4].high = 53;  kgrp[ 4].pos = 204999;  kgrp[ 4].end = 244908;  kgrp[ 4].loop = 17191;
kgrp[ 5].root = 55;  kgrp[ 5].high = 57;  kgrp[ 5].pos = 244910;  kgrp[ 5].end = 290978;  kgrp[ 5].loop = 23286;
kgrp[ 6].root = 60;  kgrp[ 6].high = 61;  kgrp[ 6].pos = 290980;  kgrp[ 6].end = 342948;  kgrp[ 6].loop = 18002;
kgrp[ 7].root = 64;  kgrp[ 7].high = 65;  kgrp[ 7].pos = 342950;  kgrp[ 7].end = 391750;  kgrp[ 7].loop = 19746;
kgrp[ 8].root = 67;  kgrp[ 8].high = 69;  kgrp[ 8].pos = 391752;  kgrp[ 8].end = 436915;  kgrp[ 8].loop = 22253;
kgrp[ 9].root = 72;  kgrp[ 9].high = 73;  kgrp[ 9].pos = 436917;  kgrp[ 9].end = 468807;  kgrp[ 9].loop = 8852;
kgrp[10].root = 76;  kgrp[10].high = 77;  kgrp[10].pos = 468809;  kgrp[10].end = 492772;  kgrp[10].loop = 9693;
kgrp[11].root = 79;  kgrp[11].high = 81;  kgrp[11].pos = 492774;  kgrp[11].end = 532293;  kgrp[11].loop = 10596;
kgrp[12].root = 84;  kgrp[12].high = 85;  kgrp[12].pos = 532295;  kgrp[12].end = 560192;  kgrp[12].loop = 6011;
kgrp[13].root = 88;  kgrp[13].high = 89;  kgrp[13].pos = 560194;  kgrp[13].end = 574121;  kgrp[13].loop = 3414;
kgrp[14].root = 93;  kgrp[14].high = 999; kgrp[14].pos = 574123;  kgrp[14].end = 586343;  kgrp[14].loop = 2399;

//initialise...
env = 0.0f;
dec = 0.99f; //all notes off
//notes[0] = EVENTS_DONE;
volume = 0.05f;
muff = 160.0f;
cpos = 0;
if(attr_combfltr){
  comb = (float*) sdram_malloc(256*sizeof(float));
  if(!comb){
    LogTextMessage("mdaPiano sdram malloc (comb) failed!");
  }
}

Fs = (float)SAMPLERATE; // sample rate!
iFs = 1.0f/Fs;
cmax = 0x7F;

pgate = 0;]]></code.init>
      <code.krate><![CDATA[// Update params
size = (int)(12.0f * param_2 - 6.0f);
sizevel = 0.12f * param_3;
muffvel = param_5 * param_5 * 5.0f;

velsens = 1.0f + param_6 + param_6;
if(param_6 < 0.25f) velsens -= 0.75f - 3.0f * param_6;

fine = param_9 - 0.5f;
random = 0.077f * param_10 * param_10;
stretch = 0.000434f * (param_11 - 0.5f);

cdep = param_7 * param_7;
trim = 1.50f - 0.79f * cdep;
width = 0.04f * param_7;  if(width > 0.03f) width = 0.03f;]]></code.krate>
      <code.srate><![CDATA[//Note on and off
{
  float l=99.0f;
  int k, s;
  int note = (inlet_note>>21)+64;
  int velocity = inlet_velocity>>20;

  if(inlet_gate && !pgate) { // Rising edge i.e. note on
    if(velocity>0)
    {
      k = (note - 60) * (note - 60);
      l = fine + random * ((float)(k % 13) - 6.5f);  //random & fine tune
      if(note > 60) l += stretch * (float)k; //stretch

      s = size;
      if(velocity > 40) s += (int)(sizevel * (float)(velocity - 40));

      k = 0;
      while(note > (kgrp[k].high + s)) k++;  //find keygroup

      l += (float)(note - kgrp[k].root); //pitch
      l = 22050.0f * iFs * powf(M_E, 0.05776226505f * l);
      delta = (int)(65536.0f * l);
      frac = 0;
      pos = kgrp[k].pos;
      end = kgrp[k].end;
      loop = kgrp[k].loop;

      env = (0.5f + velsens) * powf(0.0078f * velocity, velsens); //velocity

      l = 50.0f + param_4 * param_4 * muff + muffvel * (float)(velocity - 64); //muffle
      if(l < (55.0f + 0.25f * (float)note)) l = 55.0f + 0.25f * (float)note;
      if(l > 210.0f) l = 210.0f;
      ff = l * l * iFs;
      f0 = f1 = 0.0f;

      if(note <  12) note = 12;
      if(note > 108) note = 108;
      l = volume * trim;
      outr = l + l * width * (float)(note - 60);
      outl = l + l - outr;

      if(note < 44) note = 44; //limit max decay length
      l = 2.0f * param_0;
      if(l < 1.0f) l += 0.25f - 0.5f * param_0;
      dec = powf(M_E, -iFs * powf(M_E, -0.6f + 0.033f * note - l));
    }
  }else if(!inlet_gate && pgate) { // Falling edge i.e. note off
    if(note < 94){ //no release on highest notes
      dec = powf(M_E, -iFs * powf(M_E, 2.0f + 0.017f * note - 2.0f * param_1));
    }
  }
}
pgate = inlet_gate;

//Process
{
  float x, l, r;
  int i;

	frac += delta;  //integer-based linear interpolation
	pos += frac >> 16;
	frac &= 0xFFFF;
	if(pos > end) pos -= loop;
	i = PianoData::pianoData[pos];
	i = (i << 7) + (frac >> 9) * (PianoData::pianoData[pos + 1] - i);
	x = env * (((float)i)*2.38418579e-7f); // was i/(1<<22)
	
	env = env * dec;  //envelope
	f0 += ff * (x + f1 - f0);  //muffle filter
	f1 = x;
	
	l = outl * f0;
	r = outr * f0;

  if(attr_combfltr){
    comb[cpos] = l + r;
    ++cpos &= cmax;
    x = cdep * comb[cpos];  //stereo simulator
  } else {
    x = 0;
  }

  outlet_out0 = float_to_q27(l+x);
  outlet_out1 = float_to_q27(r-x);
}]]></code.srate>
   </obj.normal>
</objdefs>