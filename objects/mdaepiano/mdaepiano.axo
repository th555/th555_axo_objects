<objdefs appVersion="1.0.12">
   <obj.normal id="mdaepiano" uuid="5711f510-6711-4521-98f1-25dfe49cb0d9">
      <sDescription>Port of Paul Kellett&apos;s MDA EPiano.
This is a single voice, best put in a poly subpatch.
Don&apos;t forget to connect velocity!</sDescription>
      <author>Thijs Meijerink</author>
      <license>MIT</license>
      <inlets>
         <frac32.bipolar name="note"/>
         <bool32.risingfalling name="gate"/>
         <frac32.positive name="velocity"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="out0" description="audio out left"/>
         <frac32buffer.bipolar name="out1" description="audio out right"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="EnvelopeDecay">
            <DefaultValue v="32.0"/>
         </frac32.u.map>
         <frac32.u.map name="EnvelopeRelease">
            <DefaultValue v="32.0"/>
         </frac32.u.map>
         <frac32.u.map name="Hardness">
            <DefaultValue v="32.0"/>
         </frac32.u.map>
         <frac32.u.map name="TrebleBoost">
            <DefaultValue v="32.0"/>
         </frac32.u.map>
         <frac32.u.map name="Modulation">
            <DefaultValue v="32.0"/>
         </frac32.u.map>
         <frac32.u.map name="LFORate">
            <DefaultValue v="35.0"/>
         </frac32.u.map>
         <frac32.u.map name="VelocitySense">
            <DefaultValue v="16.0"/>
         </frac32.u.map>
         <frac32.u.map name="StereoWidth">
            <DefaultValue v="32.0"/>
         </frac32.u.map>
         <frac32.u.map name="FineTuning">
            <DefaultValue v="32.0"/>
         </frac32.u.map>
         <frac32.u.map name="RandomTuning">
            <DefaultValue v="9.0"/>
         </frac32.u.map>
         <frac32.u.map name="Overdrive">
            <DefaultValue v="0.0"/>
         </frac32.u.map>
      </params>
      <attribs/>
      <file-depends>
         <file-depend localFilename="mdaEPianoData.raw" targetPath="/shared/mdaepiano/mdaEPianoData.raw"/>
      </file-depends>
      <includes>
         <include>./mdaEPiano.h</include>
         <include>./mdaEPiano.cpp</include>
      </includes>
      <depends>
         <depend>fatfs</depend>
      </depends>
      <code.declaration><![CDATA[#define M_E 2.71828182845904523536f

// Parameters in 0 to 1 floating point format
#define param_0   q27_to_float(param_EnvelopeDecay)
#define param_1   q27_to_float(param_EnvelopeRelease)
#define param_2   q27_to_float(param_Hardness)
#define param_3   q27_to_float(param_TrebleBoost)
#define param_4   q27_to_float(param_Modulation)
#define param_5   q27_to_float(param_LFORate)
#define param_6   q27_to_float(param_VelocitySense)
#define param_7   q27_to_float(param_StereoWidth)
#define param_9   q27_to_float(param_FineTuning)
#define param_10  q27_to_float(param_RandomTuning)
#define param_11  q27_to_float(param_Overdrive)

#define SUSTAIN 128
#define SILENCE 0.0001f  //voice choking

//voice state
int delta;  //sample playback
int frac;
int pos;
int end;
int loop;

float env;  //envelope
float dec;

float f0;   //first-order LPF
float f1;
float ff;

float outl;
float outr;


struct KGRP  //keygroup
{
  int root;  //MIDI root note
  int high;  //highest note
  int pos;
  int end;
  int loop;
};

float Fs, iFs;

///global internal variables
KGRP  kgrp[34];
float width;
int  size;
float lfo0, lfo1, dlfo, lmod, rmod;
float treb, tfrq, tl, tr;
float tune, fine, random, overdrive;
float muff, muffvel, sizevel, velsens, volume, modwhl;

float tfrqa, tfrqb;
#define LUTSZ 10
float dlfolut[LUTSZ + 1];

bool pgate;

float dlfoi;
float dfrac;]]></code.declaration>
      <code.init><![CDATA[#define WAVELEN 422418 // Size of data file/array in shorts
#define WAVEBYTES (WAVELEN*2) // Size of data in bytes
#define WAVEPATH "/shared/mdaepiano/mdaEPianoData.raw" // Location of data on SD card (see "file-depends" in the XML)

{ //Waveform data and keymapping
  kgrp[ 0].root = 36;  kgrp[ 0].high = 39; //C1
  kgrp[ 3].root = 43;  kgrp[ 3].high = 45; //G1
  kgrp[ 6].root = 48;  kgrp[ 6].high = 51; //C2
  kgrp[ 9].root = 55;  kgrp[ 9].high = 57; //G2
  kgrp[12].root = 60;  kgrp[12].high = 63; //C3
  kgrp[15].root = 67;  kgrp[15].high = 69; //G3
  kgrp[18].root = 72;  kgrp[18].high = 75; //C4
  kgrp[21].root = 79;  kgrp[21].high = 81; //G4
  kgrp[24].root = 84;  kgrp[24].high = 87; //C5
  kgrp[27].root = 91;  kgrp[27].high = 93; //G5
  kgrp[30].root = 96;  kgrp[30].high =999; //C6

  kgrp[0].pos = 0;        kgrp[0].end = 8476;     kgrp[0].loop = 4400;  
  kgrp[1].pos = 8477;     kgrp[1].end = 16248;    kgrp[1].loop = 4903;  
  kgrp[2].pos = 16249;    kgrp[2].end = 34565;    kgrp[2].loop = 6398;  
  kgrp[3].pos = 34566;    kgrp[3].end = 41384;    kgrp[3].loop = 3938;  
  kgrp[4].pos = 41385;    kgrp[4].end = 45760;    kgrp[4].loop = 1633; //was 1636;  
  kgrp[5].pos = 45761;    kgrp[5].end = 65211;    kgrp[5].loop = 5245;  
  kgrp[6].pos = 65212;    kgrp[6].end = 72897;    kgrp[6].loop = 2937;  
  kgrp[7].pos = 72898;    kgrp[7].end = 78626;    kgrp[7].loop = 2203; //was 2204;  
  kgrp[8].pos = 78627;    kgrp[8].end = 100387;   kgrp[8].loop = 6368;  
  kgrp[9].pos = 100388;   kgrp[9].end = 116297;   kgrp[9].loop = 10452;  
  kgrp[10].pos = 116298;  kgrp[10].end = 127661;  kgrp[10].loop = 5217; //was 5220; 
  kgrp[11].pos = 127662;  kgrp[11].end = 144113;  kgrp[11].loop = 3099;  
  kgrp[12].pos = 144114;  kgrp[12].end = 152863;  kgrp[12].loop = 4284;  
  kgrp[13].pos = 152864;  kgrp[13].end = 173107;  kgrp[13].loop = 3916;  
  kgrp[14].pos = 173108;  kgrp[14].end = 192734;  kgrp[14].loop = 2937;  
  kgrp[15].pos = 192735;  kgrp[15].end = 204598;  kgrp[15].loop = 4732;  
  kgrp[16].pos = 204599;  kgrp[16].end = 218995;  kgrp[16].loop = 4733;  
  kgrp[17].pos = 218996;  kgrp[17].end = 233801;  kgrp[17].loop = 2285;  
  kgrp[18].pos = 233802;  kgrp[18].end = 248011;  kgrp[18].loop = 4098;  
  kgrp[19].pos = 248012;  kgrp[19].end = 265287;  kgrp[19].loop = 4099;  
  kgrp[20].pos = 265288;  kgrp[20].end = 282255;  kgrp[20].loop = 3609;  
  kgrp[21].pos = 282256;  kgrp[21].end = 293776;  kgrp[21].loop = 2446;  
  kgrp[22].pos = 293777;  kgrp[22].end = 312566;  kgrp[22].loop = 6278;  
  kgrp[23].pos = 312567;  kgrp[23].end = 330200;  kgrp[23].loop = 2283;  
  kgrp[24].pos = 330201;  kgrp[24].end = 348889;  kgrp[24].loop = 2689;  
  kgrp[25].pos = 348890;  kgrp[25].end = 365675;  kgrp[25].loop = 4370;  
  kgrp[26].pos = 365676;  kgrp[26].end = 383661;  kgrp[26].loop = 5225;  
  kgrp[27].pos = 383662;  kgrp[27].end = 393372;  kgrp[27].loop = 2811;  
  kgrp[28].pos = 383662;  kgrp[28].end = 393372;  kgrp[28].loop = 2811; //ghost
  kgrp[29].pos = 393373;  kgrp[29].end = 406045;  kgrp[29].loop = 4522;  
  kgrp[30].pos = 406046;  kgrp[30].end = 414486;  kgrp[30].loop = 2306;  
  kgrp[31].pos = 406046;  kgrp[31].end = 414486;  kgrp[31].loop = 2306; //ghost
  kgrp[32].pos = 414487;  kgrp[32].end = 422408;  kgrp[32].loop = 2169;  
}

if(!EPianoData::epianoData){
	short* epianoData = (short*) sdram_malloc(WAVEBYTES);
	if(!epianoData){
	   LogTextMessage("Malloc mdaEPianoData in sdram failed!");
	   return;
	}
	
	// File loading code adapted from loadElementsData() in the firmware
	FIL FileObject;
	FRESULT err;
	UINT bytes_read;
	int i;
	
	err = f_open(&FileObject, WAVEPATH, FA_READ | FA_OPEN_EXISTING);
	if (err != FR_OK) {
	   LogTextMessage("Open failed: %s", WAVEPATH);
	   // clear array
	   for (i = 0; i < WAVELEN; i++) {
	       epianoData[i] = 0;
	   }
	   return;
	}
	err = f_read(&FileObject, epianoData, WAVEBYTES, &bytes_read);
	if (err != FR_OK) {LogTextMessage("Read failed %s\n", WAVEPATH); return;}
	err = f_close(&FileObject);
	if (err != FR_OK) {LogTextMessage("Close failed %s\n", WAVEPATH); return;}

	EPianoData::epianoData = epianoData;
	LogTextMessage("mdaEPiano loading sample complete, SDRAM free %d", sdram_get_free() );

  //extra xfade looping...
  for(int k=0; k<28; k++)
  {
    int p0 = kgrp[k].end;
    int p1 = kgrp[k].end - kgrp[k].loop;

    float xf = 1.0f;
    float dxf = -0.02f;

    while(xf > 0.0f)
    {
      EPianoData::epianoData[p0] = (short)((1.0f - xf)
        * (float)EPianoData::epianoData[p0] + xf
        * (float)EPianoData::epianoData[p1]);
      p0--;
      p1--;
      xf += dxf;
    }
  }
} else {
	//LogTextMessage("mdaEPiano sample already loaded");
}

Fs = (float)SAMPLERATE; // sample rate!
iFs = 1.0f/Fs;

  //initialise...
env = 0.0f;
dec = 0.99f; //all notes off
volume = 0.05f;
muff = 160.0f;
tl = tr = lfo0 = dlfo = 0.0f;
lfo1 = 1.0f;

//Precompute to avoid pow in k-rate
tfrqa = 1.0f - powf(M_E, -iFs * 14000.0f);
tfrqb = 1.0f - powf(M_E, -iFs * 5000.0f);

//Generate lookup table for lfo rate
for(int i=0; i <= LUTSZ; i++){
	dlfolut[i] = 6.283f * iFs * powf(M_E, 6.22f * ((float)i/(float)LUTSZ) - 2.61f); //lfo rate
}

pgate = 0;]]></code.init>
      <code.krate><![CDATA[//parameter change
size = (int)(12.0f * param_2 - 6.0f);

treb = 4.0f * param_3 * param_3 - 1.0f; //treble gain
if(param_3 > 0.5f) tfrq = tfrqa; else tfrq = tfrqb; //treble freq

rmod = lmod = param_4 + param_4 - 1.0f; //lfo depth
if(param_4 < 0.5f) rmod = -rmod;

dlfoi = param_5*LUTSZ;
dfrac = dlfoi - ((int)dlfoi);
float a = dlfolut[(int)dlfoi];
float b = dlfolut[(int)dlfoi + 1];
dlfo = a + dfrac * (b - a); //lfo rate (linear interpolation)

velsens = 1.0f + param_6 + param_6;
if(param_6 < 0.25f) velsens -= 0.75f - 3.0f * param_6;

width = 0.03f * param_7;
fine = param_9 - 0.5f;
random = 0.077f * param_10 * param_10;
overdrive = 1.8f * param_11;]]></code.krate>
      <code.srate><![CDATA[//Note on and off
{
  float l=99.0f;
  int v, vl=0, k, s;
  int note = (inlet_note>>21)+64;
  int velocity = inlet_velocity>>20;
  
  if(inlet_gate && !pgate) { // Rising edge i.e. note on
  if(velocity > 0) 
  {
    k = (note - 60) * (note - 60);
    l = fine + random * ((float)(k % 13) - 6.5f);  //random & fine tune

    s = size;

    k = 0;
    while(note > (kgrp[k].high + s)) k += 3;  //find keygroup
    l += (float)(note - kgrp[k].root); //pitch
    l = 32000.0f * iFs * powf(M_E, 0.05776226505f * l);
    delta = (int)(65536.0f * l);
    frac = 0;

    if(velocity > 48) k++; //mid velocity sample
    if(velocity > 80) k++; //high velocity sample
    pos = kgrp[k].pos;
    end = kgrp[k].end - 1;
    loop = kgrp[k].loop;

    env = (3.0f + 2.0f * velsens) * powf(0.0078f * velocity, velsens); //velocity
    
    if(note > 60) env *= powf(M_E, 0.01f * (float)(60 - note)); //new! high notes quieter

    l = 50.0f + param_4 * param_4 * muff + muffvel * (float)(velocity - 64); //muffle
    if(l < (55.0f + 0.4f * note)) l = 55.0f + 0.4f * note;
    if(l > 210.0f) l = 210.0f;
    ff = l * l * iFs;

    note = note; //note->pan
    if(note <  12) note = 12;
    if(note > 108) note = 108;
    l = volume;
    outr = l + l * width * (float)(note - 60);
    outl = l + l - outr;

    if(note < 44) note = 44; //limit max decay length
    dec = powf(M_E, -iFs * powf(M_E, -1.0f + 0.03f * note - 2.0f * param_0));
  }
  }else if(!inlet_gate && pgate) { // Falling edge i.e. note off
      if(note < 94 || note == SUSTAIN){ //no release on highest notes
        dec = powf(M_E, -iFs * powf(M_E, 2.0f + 0.017f * note - 2.0 * param_1));
      }
  }
}
pgate = inlet_gate;

//Process
{
  float x, l, r, od=overdrive;
  int i;

  frac += delta;  //integer-based linear interpolation
  pos += frac >> 16;
  frac &= 0xFFFF;
  if(pos > end) pos -= loop;
  i = EPianoData::epianoData[pos];
  i = (i << 7) + (frac >> 9) * (EPianoData::epianoData[pos + 1] - i);
  x = env * (((float)i)*2.38418579e-7f); 
  env = env * dec;  //envelope

  if(x>0.0f) { x -= od * x * x;  if(x < -env) x = -env; } //overdrive

  l = outl * x;
  r = outr * x;

  tl += tfrq * (l - tl);  //treble boost
  tr += tfrq * (r - tr);
  r  += treb * (r - tr);
  l  += treb * (l - tl);
  
  lfo0 += dlfo * lfo1;  //LFO for tremolo and autopan
  lfo1 -= dlfo * lfo0;
  l += l * lmod * lfo1;
  r += r * rmod * lfo1;  //worth making all these local variables?

  outlet_out0 = float_to_q27(l);
  outlet_out1 = float_to_q27(r);
}]]></code.srate>
   </obj.normal>
</objdefs>